---
--
-- Main architecture.
-- <br/>* All function with callback - callback is last argument.
-- <br/>* In callback first argument is object. It could be loop or specific object(e.g. file).
-- <br/>* Second argument is error object or nil.
-- <br/>* loop parameter could be omit in constructors.
-- <br/>   uv.XXX(loop, ...) - correct
-- <br/>   uv.XXX(...) - correct loop is uv.default_loop()
-- <br/>   uv.XXX(nil, ...) - loop is uv.default_loop(), but first parameter in ctor is nil
--
-- @module lluv

-- callbacks
do

--- Definition for callback passed to uv.handles.
--
-- @tparam uv_handle handle
function walk_cb                    () end

end

-- loop
do

--- Run event loop.
--
-- @tparam[opt] function msgh error message handler
-- @tparam[opt=uv.RUN_DEFAULT] number run mode
--
-- @usage
--  uv.run(debug.traceback)
--  uv.run(uv.RUN_ONCE)
function run                        () end

--- Stop event loop.
--
function stop                       () end

--- Iterate over handles.
--
-- @tparam[opt] walk_cb callback
function handles                    () end

--- Return the current timestamp in milliseconds.
--
-- @treturn number milliseconds
function now                        () end

--- Return default loop object.
--
-- @treturn uv_loop loop
function default_loop               () end

--- Update the event loop’s concept of “now”.
--
function update_time       () end

end

-- ctor
do

--- Create new event loop object
--
function loop                       () end

--- Create new TTY handle
--
-- @treturn uv_tty handle
function tty                        () end

--- Create new TCP handle
--
-- @treturn uv_tcp handle
function tcp                        () end

--- Create new UDP handle
--
-- @treturn uv_udp handle
function udp                        () end

--- Create new Timer handle
--
-- @treturn uv_timer handle
function timer                      () end

--- Create new Idle handle
--
-- @treturn uv_idle handle
function idle                       () end

--- Create new FS event handle
--
-- @treturn uv_fs_event handle
function fs_event                   () end

--- Create new FS poll handle
--
-- @treturn uv_fs_poll handle
function fs_poll                    () end

--- Create new Pipe handle
--
-- @tparam[opt=false] boolean ipc indicate if this pipe will be used for handle passing between processes
-- @treturn uv_pipe
function pipe                       () end

--- Create new Poll handle
--
-- @tparam number file handle
-- @treturn uv_poll
function poll                       () end

--- Create new Poll handle
--
-- @tparam number socket handle
-- @treturn uv_poll
function poll_socket                () end

--- Create new Prepare handle
--
-- @treturn uv_prepare handle
function prepare                    () end

--- Create new Check handle
--
-- @treturn uv_check handle
function check                      () end

--- spawn new process and return new Process handle
--
-- @tparam process_options options
-- @tparam[opt] function callback(process, error, exit_status, signal)
-- @treturn uv_process handle
function spawn                      () end

--- Create new Signal handle
--
-- @treturn uv_signal handle
function signal                     () end

end

-- misc
do
--- Return libuv version.
--
-- @tparam[opt] unpack if true then version return as three number
-- @treturn[1] string version
-- @treturn[2] number minor
-- @treturn[2] number major
-- @treturn[2] number patch
function version                    () end

--- Get the title of the current process.
--
-- @treturn string title.
function get_process_title          () end

--- Set the title of the current process.
--
-- @tparam string title.
function set_process_title          () end

--- Get the resident set size for the current process.
--
-- @treturn number rss
function resident_set_memory        () end

--- Get the current system uptime.
--
-- @treturn number uptime
function uptime                     () end

--- Gets the resource usage for the current process.
--
function getrusage                  () end

--- Get information about the CPUs on the system.
--
-- @treturn cpu_infos infos
function cpu_info                   () end

--- Get address information about the network interfaces on the system. 
--
-- @treturn interface_address addresses
function interface_addresses        () end

--- Get the executable path.
--
-- @treturn string path
function exepath                    () end

--- Get the current working directory.
--
-- @treturn string path
function cwd                        () end

--- Change the current working directory.
--
-- @tparam string path
function chdir                      () end

--- Get memory information (in bytes).
--
-- @treturn number count
function get_total_memory           () end

--- Get memory information (in bytes).
--
-- @treturn number count
function get_free_memory            () end

--- Returns the current high-resolution real time.
--
-- @treturn number time
function hrtime                     () end

end

-- fs submodule
do

--- Remove the specified file.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path file to unlink
-- @tparam[opt] function callback(loop, err, path)
function fs_unlink                  () end

--- Create the temporary directory.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path directory template name to create
-- @tparam[opt] function callback(loop, err, path)
function fs_mkdtemp                 () end

--- Create the specified directory.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path directory to create
-- @tparam[opt] function callback(loop, err, path)
function fs_mkdir                   () end

--- Remove the specified directory.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path directory to remove
-- @tparam[opt] function callback(loop, err, path)
function fs_rmdir                   () end

--- List files from a directory.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path directory to list
-- @tparam[opt] function callback(loop, err, path, files)
function fs_scandir                 () end

--- Crossplatform file stat.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path file to stat
-- @tparam[opt] function callback(loop, err, stat, path)
function fs_stat                    () end

--- Crossplatform link stat.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path link to stat
-- @tparam[opt] function callback(loop, err, stat, path)
function fs_lstat                   () end

--- Rename file.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path original file
-- @tparam string new_path new name for the file
-- @tparam[opt] function callback(loop, err, path)
function fs_rename                  () end

--- Change file permissions.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path file which permissions will be changed
-- @tparam number mode file permissions (e.g. 0755)
-- @tparam[opt] function callback(loop, err, path)
function fs_chmod                   () end

--- Update file timestamps.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path file which times will be changed
-- @tparam number atime new accessed time
-- @tparam number mtime new modified time
-- @tparam[opt] function callback(loop, err, path)
function fs_utime                   () end 

--- Create a symlink.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path original file
-- @tparam string new_path name for the symlink
-- @tparam[opt] number flags 
-- @tparam[opt] function callback(loop, err, path)
function fs_symlink                 () end

--- Read link file and return the original file path.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path link name
-- @tparam[opt] function callback(loop, err, path)
function fs_readlink                () end

--- Changes ownership of a file.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path original file
-- @tparam number uid User ID
-- @tparam number gid GroupID
function fs_chown                   () end

--- Check real user's permissions for a file.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path original file
-- @tparam[opt] number|table checked access permissions
-- @tparam[opt] function callback(loop, err, ok, path)
function fs_access                  () end

--- Open file.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path original file
-- @tparam string mode for opening the file (e.g. "w+b")
-- @tparam[opt] number flags flags for opening the file
-- @tparam[opt] function callback(file, err, path)
function fs_open                    () end

end

-- process submodule
do

--- Disables inheritance for file descriptors / handles that this process inherited from its parent.
--
function disable_stdio_inheritance  () end

--- Sends the specified signal to the given PID.
--
-- @tparam number pid process id
-- @tparam[opt=uv.SIGTERM] number signal
-- @return true
function kill                       () end

end

-- signal submodule
do

--- Ignore specific signal.
--
-- @tparam number signal
function signal_ignore              () end

--- Set default handler to signal
--
-- @tparam number signal
function signal_default             () end

end

--- lluv error object
-- @type uv_error
--
do

--- Get the error category.
-- 
-- @treturn number number of error category (uv.ERROR_XXX constants e.g. uv.ERROR_UV)
--
function category                   () end

--- Get the number value of error.
-- 
-- @treturn number number of error (uv.EXXX constants e.g. uv.EOF)
function no                         () end

--- Get the error name.
--
-- @treturn string error name (e.g. "EOF")
function name                       () end

--- Get the error description.
-- 
-- @treturn string error description (e.g. "Login denied")
function msg                        () end

--- Get the extinsion information about error.
-- This field e.g. contains file path for fs_xxx function.
--
-- @treturn string error information
function ext                        () end

--- Get the full error description.
--
-- @treturn string string that contain name, message and number of error
function __tostring                 () end

end

--- lluv fixed buffer
-- @type uv_fbuffer
--
do

--- Free buffer.
--
function free                       () end

--- Return buffer data as string.
--
-- @tparam[opt=0] number offset starting from 0
-- @tparam[opt=self:size()] number size
-- @treturn string data
--
-- @usage
-- str = buf:to_s(10) -- return first 10 bytes
-- str = buf:to_s(5, 10) -- return 10 bytes starting from 5th
function to_s                       () end

--- Return buffer data as lightuserdata.
--
-- @tparam[opt=0] number offset starting from 0
-- @treturn lightuserdata pointer
--
-- @usage
-- ptr = buf:to_p(4)
function to_p                       () end

--- Return number of bytes in buffer.
--
-- @treturn number size
function size                       () end

end

--- lluv file object
-- @type uv_file
--
do

--- Return loop object where this handle runs.
--
-- @treturn uv_loop
function loop                       () end

--- Crossplatform file stat.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path file to stat
-- @tparam[opt] function callback(self, err, stat)
function stat                       () end

--- Sync all changes made to file.
--
-- @tparam[opt] function callback(self, err)
function sync                       () end

--- Sync data changes made to file.
--
-- @tparam[opt] function callback(self, err)
function datasync                   () end

--- Truncate the contents of a file to the specified offset.
--
-- @tparam number offset
-- @tparam[opt] function callback(self, err)
function truncate                   () end

--- Close file handle.
--
-- @tparam[opt] function callback(self, err)
function close                      () end

---
--
function chown                      () end

---
--
function chmod                      () end

---
--
function utime                      () end

--- Read data from file.
--
-- @tparam uv_fbuffer buffer
-- @tparam[opt=0] number position specifying where to begin reading from in the file.
-- @tparam[opt=0] number offset offset in the buffer to start writing at.
-- @tparam[opt=buffer:size()-offset] number length number of bytes to reading.
-- @tparam function callback(file, err, buffer, size)
function read                       () end

--- Read data from file.
--
-- @tparam number buffer_length allocate buffer that size.
-- @tparam[opt=0] number position specifying where to begin reading from in the file.
-- @tparam[opt=0] number offset offset in the buffer to start writing at.
-- @tparam[opt=buffer:size()-offset] number length number of bytes to reading.
-- @tparam function callback(file, err, buffer, size)
function read                       () end

--- Read data from file.
--
-- @tparam lightuserdata buffer pointer to buffer
-- @tparam number buffer_length buffer size.
-- @tparam[opt=0] number position specifying where to begin reading from in the file.
-- @tparam[opt=0] number offset offset in the buffer to start writing at.
-- @tparam[opt=buffer:size()-offset] number length number of bytes to reading.
-- @tparam function callback(file, err, buffer, size)
function read                       () end

--- Write data to file.
--
-- @tparam buffer|string data
-- @tparam[opt=0] number position specifying where to begin writing to in the file.
-- @tparam[opt=0] number offset offset in the buffer to start reading at.
-- @tparam[opt=buffer:size()-offset] number length number of bytes to writing.
-- @tparam function callback(file, err, data, size)
function write                      () end

end

--- lluv loop type
-- @type uv_loop
--
do

---
--
function run               () end

---
--
function close             () end

---
--
function alive             () end

---
--
function stop              () end

---
--
function now               () end

---
--
function handles           () end

---
--
function fileno            () end

---
--
function poll_timeout      () end

---
--
function update_time       () end

---
--
function close_all_handles () end

end

--- lluv handle base class
-- @type uv_handle
--
do

--- Returns loop object.
--
function loop                       () end

--- Close handle.
--
-- Callback gets already closed handle.
--
-- @tparam[opt] function callback(handle)
function close                      () end

--- Reference handle.
--
function ref                        () end

--- Unreference handle.
--
function unref                      () end

--- Indicates if handle is referenced.
--
-- @treturn boolean
function has_ref                    () end

--- Indicates if handle is active.
--
function is_active                  () end

--- Indicates if handle is closing or already closed.
--
function is_closing                 () end

---
--
function send_buffer_size           () end

---
--
function recv_buffer_size           () end

---
--
function fileno                     () end

end

---
-- @type uv_stream
--
do

--- Shutdown the outgoing (write) side of a duplex stream.
-- 
-- @tparam function callback(self, error)
-- @treturn uv_stream self
function shutdown                   () end

--- Start listening for incoming connections.
--
-- @tparam[opt] number backlog
-- @tparam function callback(self, error)
-- @treturn uv_stream self
function listen                     () end

--- Accept incoming connections.
--
-- @tparam[opt] uv_stream client handle
-- @treturn uv_stream client
function accept                     () end

--- Read data from an incoming stream.
--
-- @tparam function callback(self, error, data)
-- @treturn uv_stream self
function start_read                 () end

--- Stop reading data from the stream.
--
-- @treturn uv_stream self
function stop_read                  () end

--- Write data to stream.
--
-- @tparam string|table data
-- @tparam[opt] function callback(self, error)
-- @treturn uv_stream self
function write                      () end

--- Write data to stream.
--
-- @treturn uv_stream self
function try_write                  () end

--- Check if stream is readable.
--
-- @treturn boolean flag
function readable                   () end

--- Check if stream is writable.
--
-- @treturn boolean flag
function writable                   () end

---
--
function set_blocking               () end

end


--- lluv idle handle
-- @type uv_idle
--
do

--- Start idle handle.
--
-- @tparam function callback(handle)
function start                      () end

--- Stop idle handle.
--
function stop                       () end

end

--- lluv timer handle
-- @type uv_timer
--
do

--- Start timer handle.
--
-- @tparam[opt] number timeout timer will start after the specified amount of time.
-- @tparam[opt] number repeat  timer will run again after the specified amount of time.
-- @tparam function callback(handle)
-- @treturn uv_timer self
function start                      () end

--- Stop timer handle.
--
-- @treturn uv_timer self
function stop                       () end

--- Stop the Timer, and if it is repeating restart it using the repeat value as the timeout.
--
-- @tparam[opt] number repeat new repeat value
-- @treturn uv_timer self
function again                      () end

--- Set the repeat value. 
--
-- @tparam number repeat new value
-- @treturn uv_timer self
function set_repeat                 () end

--- Get repeat value. 
--
-- @treturn number repeat value
function get_repeat                 () end

end

--- lluv fs_event handle
-- @type uv_fs_event
--
do

--- Start FS Event handle.
--
-- @tparam string path path to monitoring
-- @tparam[opt] number|table flags
-- @tparam function callback(self, err, path|nil, events)
--
-- Usage
-- fs_event():start("./config", function(self, err) ... end)
function start                      () end

--- Stop FS Event handle.
--
function stop                       () end

--- Get the path being monitored by the handle.
--
function path                       () end

end

--- lluv FS poll handle
-- @type uv_fs_poll
--
do

--- Check the file at path for changes every interval milliseconds.
--
-- @tparam function callback(handle, prev_stat, curr_stat)
-- @treturn uv_fs_poll self
function start                      () end

--- Stop the handle
--
-- @treturn uv_fs_poll self
function stop                       () end

--- Get the path being monitored by the handle.
--
-- @treturn string path
function getpath                    () end

end

--- lluv Pipe handle
-- @type uv_pipe
--
do
--- Open an existing file descriptor.
-- 
-- @tparam number fileno file descriptor
-- @treturn uv_pipe self
function open                       () end

--- Bind the pipe to a file path (Unix) or a name (Windows).
-- 
-- @tparam string name
-- @tparam[opt] function callback(self, error, name)
-- @treturn uv_pipe self
function bind                       () end

--- Connect to the Unix domain socket or the named pipe.
-- 
-- @tparam string name
-- @tparam function callback(self, error)
-- @treturn uv_pipe self
function connect                    () end

--- Get the name of the Unix domain socket or the named pipe.
--
-- @treturn string name
function getsockname                () end

--- Set the number of pending pipe instance handles when the pipe server is waiting for connections.
--
-- @tparam number count
-- @treturn uv_pipe self
function pending_instances          () end

--- Get the number of pending pipe instance.
--
-- @treturn number count
function pending_count              () end

--- Get the type of first pending handle.
-- `accept` function can check and create hanle of needed type.
--
-- @treturn string type
function pending_type               () end

end

---
-- @type uv_prepare
--
do

--- Start the handle.
--
-- @tparam function callback(self)
-- @tparam uv_prepare self
function start                      () end

--- Stop the handle.
--
-- @tparam uv_prepare self
function stop                       () end

end

---
-- @type uv_check
--
do

--- Start the handle.
--
-- @tparam function callback(self)
-- @tparam uv_check self
function start                      () end

--- Stop the handle.
--
-- @tparam uv_check self
function stop                       () end

end

---
-- @type uv_process
--
do

--- Get process ID.
-- 
-- @treturn number process id
function pid                        () end

--- Sends the specified signal to the given process handle.
--
-- @tparam[opt=uv.SIGTERM] number signal
-- @treturn uv_process self
function kill                       () end

end

---
-- @type uv_signal
--
do

--- Start the handle watching for the given signal.
--
-- @tparam number signum
-- @tparam function callback(self, signum)
-- @tparam uv_signal self
function start                      () end

--- Stop the handle.
--
-- @tparam uv_signal self
function stop                       () end

end

---
-- @type uv_tcp
--
do

--- Open an existing file descriptor.
-- 
-- @tparam number fileno descriptor
-- @treturn uv_tcp self
function open                       () end

--- Bind the handle to an address and port.
--
-- @tparam string host
-- @tparam number port
-- @tparam[opt] number flags
-- @tparam[opt] function callback(self, error, host, port)
-- @treturn uv_tcp self
function bind                       () end

--- Connect the handle to remote endpoint.
--
-- @tparam string host
-- @tparam number port
-- @tparam function callback(self, error)
-- @treturn uv_tcp self
function connect                    () end

--- Enable / disable Nagle’s algorithm.
--
-- @treturn uv_tcp self
function nodelay                    () end

--- Enable / disable TCP keep-alive.
--
-- @treturn uv_tcp self
function keepalive                  () end

--- Enable / disable simultaneous asynchronous accept requests.
--
-- @treturn uv_tcp self
function simultaneous_accepts       () end

--- Get the current address to which the handle is bound.
--
-- @treturn string host
-- @treturn number port
function getsockname                () end

--- Get the address of the peer connected to the handle.
--
-- @treturn string host
-- @treturn number port
function getpeername                () end

end

---
-- @type uv_tty
--
do

--- Set the TTY mode.
--
-- @tparam number mode
-- @treturn uv_tty self
function set_mode                   () end

--- Gets the current Window size.
--
-- @treturn number width
-- @treturn number height
function get_winsize                () end

end

---
-- @type uv_udp
--
do

--- Open an existing file descriptor.
-- 
-- @tparam number fileno descriptor
-- @treturn uv_udp self
function open                       () end

--- Bind the handle to an address and port.
--
-- @tparam string host
-- @tparam number port
-- @tparam[opt] number flags
-- @tparam[opt] function callback(self, error, host, port)
-- @treturn uv_udp self
function bind                       () end

-- Send data over the UDP socket.
--
-- @tparam string|table data
-- @tparam[opt] function callback(self, error)
-- @treturn uv_udp self
function send                       () end

---
--
function try_send                   () end

--- Get the current address to which the handle is bound.
--
-- @treturn string host
-- @treturn number port
function getsockname                () end

--- Read datagrams from UDP socket.
--
-- @tparam function callback(self, error, data, flags, host, port)
-- @treturn uv_udp self
function start_recv                 () end

--- Stop listening for incoming datagrams.
--
-- @treturn uv_udp self
function stop_recv                  () end

---
--
function set_membership             () end

---
--
function set_multicast_loop         () end

---
--
function set_multicast_ttl          () end

---
--
function set_multicast_interface    () end

---
--
function set_broadcast              () end

---
--
function set_ttl                    () end

end

---
-- @type uv_poll
--
do

--- Start polling the file descriptor.
--
-- @tparam number|string|table events
-- @tparam function callback(self, error, event)
-- @treturn uv_poll self
function start                      () end

--- Stop polling the file descriptor.
--
-- @treturn uv_poll self
function stop                       () end

end

